import {
  LocaleContext,
  forkBlur,
  forkFocus,
  getOverrides,
  isFocusVisible,
  styled
} from "./chunk-V6RD6A4A.js";
import "./chunk-YAYWVDKE.js";
import "./chunk-DHORR3Q4.js";
import {
  require_react
} from "./chunk-HUL2CLQT.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/baseui/esm/accordion/accordion.js
var React = __toESM(require_react());

// node_modules/baseui/esm/icon/styled-components.js
function getSvgStyles(_ref) {
  var $theme = _ref.$theme, $size = _ref.$size, $color = _ref.$color;
  var size = $theme.sizing.scale600;
  if ($size) {
    if ($theme.sizing[$size]) {
      size = $theme.sizing[$size];
    } else if (typeof $size === "number") {
      size = "".concat($size, "px");
    } else {
      size = $size;
    }
  }
  var color = "currentColor";
  if ($color) {
    if ($theme.colors[$color]) {
      color = $theme.colors[$color];
    } else {
      color = $color;
    }
  }
  return {
    display: "inline-block",
    fill: color,
    color,
    height: size,
    width: size
  };
}
var Svg = styled("svg", getSvgStyles);
Svg.displayName = "Svg";

// node_modules/baseui/esm/accordion/styled-components.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Root = styled("ul", {
  listStyleType: "none",
  marginBottom: 0,
  marginTop: 0,
  paddingLeft: 0,
  paddingRight: 0,
  width: "100%"
});
Root.displayName = "Root";
var PanelContainer = styled("li", function(props) {
  var $expanded = props.$expanded, colors = props.$theme.colors;
  return {
    listStyleType: "none",
    width: "100%",
    borderBottomWidth: "1px",
    borderBottomStyle: "solid",
    borderBottomColor: $expanded ? colors.mono500 : colors.mono400
  };
});
PanelContainer.displayName = "PanelContainer";
var Header = styled("div", function(props) {
  var $disabled = props.$disabled, $isFocusVisible = props.$isFocusVisible, _props$$theme = props.$theme, colors = _props$$theme.colors, sizing = _props$$theme.sizing, typography = _props$$theme.typography;
  return _objectSpread(_objectSpread({}, typography.font350), {}, {
    color: colors.contentPrimary,
    cursor: $disabled ? "not-allowed" : "pointer",
    backgroundColor: colors.listHeaderFill,
    paddingTop: sizing.scale600,
    paddingBottom: sizing.scale600,
    paddingLeft: sizing.scale700,
    paddingRight: sizing.scale700,
    marginTop: 0,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    display: "flex",
    alignItems: "center",
    outline: $isFocusVisible ? "3px solid ".concat(colors.accent) : "none",
    outlineOffset: "-3px",
    justifyContent: "space-between",
    ":hover": {
      color: colors.primary
    }
  });
});
Header.displayName = "Header";
var ToggleIcon = styled("svg", function(props) {
  var $theme = props.$theme, $disabled = props.$disabled, $color = props.$color;
  return _objectSpread(_objectSpread({}, getSvgStyles(props)), {}, {
    flexShrink: 0,
    color: $color || $theme.colors.contentPrimary,
    cursor: $disabled ? "not-allowed" : "pointer"
  });
});
ToggleIcon.displayName = "ToggleIcon";
var ToggleIconGroup = styled("g", function(props) {
  var $theme = props.$theme, $expanded = props.$expanded;
  return {
    transform: $expanded ? "rotate(0)" : "rotate(-90deg)",
    transformOrigin: "center",
    transitionProperty: "transform",
    transitionDuration: $theme.animation.timing500,
    transitionTimingFunction: $theme.animation.easeOutQuinticCurve
  };
});
ToggleIconGroup.displayName = "ToggleIconGroup";
var Content = styled("div", function(props) {
  var _props$$theme2 = props.$theme, animation = _props$$theme2.animation, colors = _props$$theme2.colors, sizing = _props$$theme2.sizing, typography = _props$$theme2.typography, $expanded = props.$expanded;
  return _objectSpread(_objectSpread({}, typography.font200), {}, {
    backgroundColor: colors.listBodyFill,
    color: colors.contentPrimary,
    paddingTop: sizing.scale800,
    paddingBottom: sizing.scale1000,
    paddingLeft: sizing.scale800,
    paddingRight: sizing.scale800,
    marginTop: 0,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    boxSizing: "border-box",
    overflow: "hidden",
    opacity: $expanded ? 1 : 0,
    visibility: $expanded ? "visible" : "hidden",
    transitionProperty: "opacity,visibility",
    transitionDuration: animation.timing500,
    transitionDelay: animation.timing200,
    transitionTimingFunction: animation.easeOutQuinticCurve
  });
});
Content.displayName = "Content";
var ContentAnimationContainer = styled("div", function(props) {
  var $height = props.$height, animation = props.$theme.animation;
  return {
    height: "".concat($height),
    overflow: "hidden",
    transitionProperty: "height",
    transitionDuration: animation.timing500,
    transitionTimingFunction: animation.easeOutQuinticCurve
  };
});
ContentAnimationContainer.displayName = "ContentAnimationContainer";

// node_modules/baseui/esm/accordion/constants.js
var STATE_CHANGE_TYPE = {
  expand: "expand"
};

// node_modules/baseui/esm/accordion/accordion.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof3(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof3(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Accordion = function(_React$Component) {
  _inherits(Accordion2, _React$Component);
  var _super = _createSuper(Accordion2);
  function Accordion2() {
    var _this;
    _classCallCheck(this, Accordion2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty2(_assertThisInitialized(_this), "state", _objectSpread2({
      expanded: []
    }, _this.props.initialState));
    return _this;
  }
  _createClass(Accordion2, [{
    key: "onPanelChange",
    value: (
      //flowlint-next-line unclear-type:off
      function onPanelChange(key, onChange3) {
        var activeKeys = this.state.expanded;
        var accordion = this.props.accordion;
        if (accordion) {
          activeKeys = activeKeys[0] === key ? [] : [key];
        } else {
          activeKeys = _toConsumableArray(activeKeys);
          var index = activeKeys.indexOf(key);
          var wasExpanded = index > -1;
          if (wasExpanded) {
            activeKeys.splice(index, 1);
          } else {
            activeKeys.push(key);
          }
        }
        var newState = {
          expanded: activeKeys
        };
        this.internalSetState(STATE_CHANGE_TYPE.expand, newState);
        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
        if (typeof onChange3 === "function") onChange3.apply(void 0, args);
      }
    )
  }, {
    key: "internalSetState",
    value: function internalSetState(type, changes) {
      var _this$props = this.props, stateReducer2 = _this$props.stateReducer, onChange3 = _this$props.onChange;
      var newState = stateReducer2(type, changes, this.state);
      this.setState(newState);
      typeof onChange3 === "function" && onChange3(newState);
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _this2 = this;
      var expanded = this.state.expanded;
      var _this$props2 = this.props, accordion = _this$props2.accordion, disabled = _this$props2.disabled, children = _this$props2.children, renderPanelContent = _this$props2.renderPanelContent, renderAll = _this$props2.renderAll, overrides = _this$props2.overrides;
      return React.Children.map(children, function(child, index) {
        if (!child) return;
        var key = child.key || String(index);
        var isExpanded = false;
        if (accordion) {
          isExpanded = expanded[0] === key;
        } else {
          isExpanded = expanded.includes(key);
        }
        var props = {
          key,
          expanded: isExpanded || child.props.expanded,
          accordion,
          renderPanelContent,
          renderAll,
          overrides: child.props.overrides || overrides,
          disabled: child.props.disabled || disabled,
          onChange: function onChange3() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }
            return _this2.onPanelChange.apply(_this2, [key, child.props.onChange].concat(args));
          }
        };
        return React.cloneElement(child, props);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.renderPanelContent) {
        console.warn("baseui:Accordion The `renderPanelContent` prop is deprecated. Please update your code to use `renderAll`.");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$overrides = this.props.overrides, overrides = _this$props$overrides === void 0 ? {} : _this$props$overrides;
      var RootOverride = overrides.Root;
      var _getOverrides = getOverrides(RootOverride, Root), _getOverrides2 = _slicedToArray(_getOverrides, 2), Root2 = _getOverrides2[0], rootProps = _getOverrides2[1];
      return React.createElement(Root2, _extends({
        "data-baseweb": "accordion",
        $disabled: this.props.disabled,
        $isFocusVisible: false
      }, rootProps), this.getItems());
    }
  }]);
  return Accordion2;
}(React.Component);
_defineProperty2(Accordion, "defaultProps", {
  accordion: true,
  disabled: false,
  initialState: {
    expanded: []
  },
  onChange: function onChange() {
  },
  overrides: {},
  renderAll: false,
  renderPanelContent: false,
  stateReducer: function stateReducer(type, newState) {
    return newState;
  }
});

// node_modules/baseui/esm/accordion/panel.js
var React2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
var Panel = function Panel2(_ref) {
  var ariaControls = _ref["aria-controls"], children = _ref.children, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$expanded = _ref.expanded, expanded = _ref$expanded === void 0 ? false : _ref$expanded, _ref$onChange = _ref.onChange, onChange3 = _ref$onChange === void 0 ? function() {
  } : _ref$onChange, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
  } : _ref$onClick, _ref$onKeyDown = _ref.onKeyDown, onKeyDown = _ref$onKeyDown === void 0 ? function() {
  } : _ref$onKeyDown, _ref$overrides = _ref.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides, _ref$title = _ref.title, title = _ref$title === void 0 ? "" : _ref$title, _ref$renderPanelConte = _ref.renderPanelContent, renderPanelContent = _ref$renderPanelConte === void 0 ? false : _ref$renderPanelConte, _ref$renderAll = _ref.renderAll, renderAll = _ref$renderAll === void 0 ? false : _ref$renderAll;
  var _React$useState = React2.useState({
    expanded,
    isFocusVisible: false,
    elementHeight: 0,
    animationInProgress: false
  }), _React$useState2 = _slicedToArray2(_React$useState, 2), localState = _React$useState2[0], setLocalState = _React$useState2[1];
  var handleFocus = React2.useCallback(function(event) {
    if (isFocusVisible(event)) {
      setLocalState(_objectSpread3(_objectSpread3({}, localState), {}, {
        isFocusVisible: true
      }));
    }
  }, [localState]);
  var handleBlur = React2.useCallback(function(event) {
    if (localState.isFocusVisible) {
      setLocalState(_objectSpread3(_objectSpread3({}, localState), {}, {
        isFocusVisible: false
      }));
    }
  }, [localState]);
  var handleClick = React2.useCallback(function(e) {
    if (disabled) {
      return;
    }
    typeof onChange3 === "function" && onChange3({
      expanded: !expanded
    });
    typeof onClick === "function" && onClick(e);
  }, [expanded, disabled, onChange3, onClick]);
  var handleKeyDown = React2.useCallback(function(e) {
    if (disabled) {
      return;
    }
    var ENTER = 13;
    var SPACE = 32;
    if (e.keyCode === ENTER || e.keyCode === SPACE) {
      typeof onChange3 === "function" && onChange3({
        expanded: !expanded
      });
      if (e.keyCode === SPACE) {
        e.preventDefault();
      }
    }
    typeof onKeyDown === "function" && onKeyDown(e);
  }, [expanded, disabled, onChange3, onKeyDown]);
  var _animateRef = React2.useRef(null);
  React2.useEffect(function() {
    if (_animateRef.current) {
      var height = _animateRef.current.getBoundingClientRect().height;
      if (expanded !== localState.expanded) {
        setLocalState(_objectSpread3(_objectSpread3({}, localState), {}, {
          expanded,
          animationInProgress: true
        }));
      } else if (parseInt(localState.elementHeight) !== height) {
        setLocalState(_objectSpread3(_objectSpread3({}, localState), {}, {
          elementHeight: height ? "".concat(height, "px") : 0
        }));
      }
    }
  }, [_animateRef.current, expanded, localState.elementHeight, localState.expanded, setLocalState]);
  var contentHeight = React2.useMemo(function() {
    if (!expanded && localState.expanded) {
      var height = _animateRef.current.getBoundingClientRect().height;
      setLocalState(_objectSpread3(_objectSpread3({}, localState), {}, {
        elementHeight: height ? "".concat(height, "px") : 0
      }));
      return localState.elementHeight;
    }
    if (!localState.expanded) {
      return 0;
    }
    return localState.animationInProgress ? localState.elementHeight : "auto";
  }, [expanded, localState.expanded, localState.animationInProgress, localState.elementHeight]);
  var sharedProps = {
    $disabled: disabled,
    $expanded: expanded,
    $isFocusVisible: localState.isFocusVisible
  };
  var PanelContainerOverride = overrides.PanelContainer, HeaderOverride = overrides.Header, ContentOverride = overrides.Content, ContentAnimationContainerOverride = overrides.ContentAnimationContainer, ToggleIconOverride = overrides.ToggleIcon, ToggleIconGroupOverride = overrides.ToggleIconGroup;
  var _getOverrides = getOverrides(PanelContainerOverride, PanelContainer), _getOverrides2 = _slicedToArray2(_getOverrides, 2), PanelContainer2 = _getOverrides2[0], panelContainerProps = _getOverrides2[1];
  var _getOverrides3 = getOverrides(HeaderOverride, Header), _getOverrides4 = _slicedToArray2(_getOverrides3, 2), Header2 = _getOverrides4[0], headerProps = _getOverrides4[1];
  var _getOverrides5 = getOverrides(ContentOverride, Content), _getOverrides6 = _slicedToArray2(_getOverrides5, 2), Content2 = _getOverrides6[0], contentProps = _getOverrides6[1];
  var _getOverrides7 = getOverrides(ContentAnimationContainerOverride, ContentAnimationContainer), _getOverrides8 = _slicedToArray2(_getOverrides7, 2), ContentAnimationContainer2 = _getOverrides8[0], contentAnimationProps = _getOverrides8[1];
  var _getOverrides9 = getOverrides(ToggleIconGroupOverride, ToggleIconGroup), _getOverrides10 = _slicedToArray2(_getOverrides9, 2), ToggleIconGroup2 = _getOverrides10[0], toggleIconGroupProps = _getOverrides10[1];
  var _getOverrides11 = getOverrides(ToggleIconOverride, ToggleIcon), _getOverrides12 = _slicedToArray2(_getOverrides11, 2), ToggleIcon2 = _getOverrides12[0], toggleIconProps = _getOverrides12[1];
  return React2.createElement(LocaleContext.Consumer, null, function(locale) {
    return React2.createElement(PanelContainer2, _extends2({}, sharedProps, panelContainerProps), React2.createElement(Header2, _extends2({
      tabIndex: 0,
      role: "button",
      "aria-expanded": expanded,
      "aria-disabled": disabled || null
    }, sharedProps, headerProps, ariaControls ? {
      "aria-controls": ariaControls
    } : {}, {
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      onFocus: forkFocus(headerProps, handleFocus),
      onBlur: forkBlur(headerProps, handleBlur)
    }), title, React2.createElement(ToggleIcon2, _extends2({
      viewBox: "0 0 24 24",
      title: localState.expanded ? locale.accordion.collapse : locale.accordion.expand,
      size: 16
    }, toggleIconProps, sharedProps), React2.createElement(ToggleIconGroup2, _extends2({}, sharedProps, toggleIconGroupProps), React2.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6 12C6 11.4477 6.44772 11 7 11H17C17.5523 11 18 11.4477 18 12C18 12.5523 17.5523 13 17 13H7C6.44772 13 6 12.5523 6 12Z"
    })), React2.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6 12C6 11.4477 6.44772 11 7 11H17C17.5523 11 18 11.4477 18 12C18 12.5523 17.5523 13 17 13H7C6.44772 13 6 12.5523 6 12Z"
    }))), React2.createElement(ContentAnimationContainer2, _extends2({}, sharedProps, contentAnimationProps, {
      $height: contentHeight,
      onTransitionEnd: function onTransitionEnd() {
        if (localState.animationInProgress) {
          setLocalState(_objectSpread3(_objectSpread3({}, localState), {}, {
            animationInProgress: false
          }));
        }
      }
    }), React2.createElement(Content2, _extends2({
      ref: _animateRef
    }, sharedProps, contentProps, ariaControls ? {
      id: ariaControls
    } : {}), localState.expanded || renderAll || renderPanelContent || localState.animationInProgress ? children : null)));
  });
};
var panel_default = Panel;

// node_modules/baseui/esm/accordion/stateful-panel.js
var React4 = __toESM(require_react());

// node_modules/baseui/esm/accordion/stateful-panel-container.js
var React3 = __toESM(require_react());
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof3(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof3(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys4(Object(source), true).forEach(function(key) {
        _defineProperty4(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass) _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _possibleConstructorReturn2(self, call) {
  if (call && (_typeof2(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized2(self);
}
function _assertThisInitialized2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf2(o);
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var defaultStateReducer = function defaultStateReducer2(type, nextState) {
  return nextState;
};
var StatefulPanelContainer = function(_React$Component) {
  _inherits2(StatefulPanelContainer2, _React$Component);
  var _super = _createSuper2(StatefulPanelContainer2);
  function StatefulPanelContainer2() {
    var _this;
    _classCallCheck2(this, StatefulPanelContainer2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty4(_assertThisInitialized2(_this), "state", _objectSpread4({
      expanded: false
    }, _this.props.initialState));
    _defineProperty4(_assertThisInitialized2(_this), "onChange", function() {
      if (typeof _this.props.onChange === "function") {
        _this.props.onChange({
          expanded: !_this.state.expanded
        });
      }
      _this.internalSetState(STATE_CHANGE_TYPE.expand, {
        expanded: !_this.state.expanded
      });
    });
    return _this;
  }
  _createClass2(StatefulPanelContainer2, [{
    key: "internalSetState",
    value: function internalSetState(type, changes) {
      var stateReducer2 = this.props.stateReducer;
      this.setState(function(prevState) {
        return stateReducer2 ? stateReducer2(type, changes, prevState) : changes;
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, children = _this$props.children, initialState = _this$props.initialState, stateReducer2 = _this$props.stateReducer, restProps = _objectWithoutProperties(_this$props, ["children", "initialState", "stateReducer"]);
      return this.props.children(_objectSpread4(_objectSpread4(_objectSpread4({}, restProps), this.state), {}, {
        onChange: this.onChange
      }));
    }
  }]);
  return StatefulPanelContainer2;
}(React3.Component);
_defineProperty4(StatefulPanelContainer, "defaultProps", {
  initialState: {
    expanded: false
  },
  stateReducer: defaultStateReducer,
  onChange: function onChange2() {
  }
});
var stateful_panel_container_default = StatefulPanelContainer;

// node_modules/baseui/esm/accordion/stateful-panel.js
function _objectWithoutProperties2(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function StatefulPanel(props) {
  var children = props.children, restProps = _objectWithoutProperties2(props, ["children"]);
  return React4.createElement(stateful_panel_container_default, restProps, function(componentProps) {
    return React4.createElement(panel_default, componentProps, children);
  });
}

// node_modules/baseui/esm/accordion/stateless-accordion.js
var React5 = __toESM(require_react());
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray3(arr);
}
function _slicedToArray3(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit3(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr)) return arr;
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function StatelessAccordion(_ref) {
  var _ref$accordion = _ref.accordion, accordion = _ref$accordion === void 0 ? true : _ref$accordion, children = _ref.children, disabled = _ref.disabled, expanded = _ref.expanded, onChange3 = _ref.onChange, _ref$overrides = _ref.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides, renderAll = _ref.renderAll, renderPanelContent = _ref.renderPanelContent;
  var RootOverrides = overrides.Root, PanelOverrides = _objectWithoutProperties3(overrides, ["Root"]);
  var _getOverrides = getOverrides(RootOverrides, Root), _getOverrides2 = _slicedToArray3(_getOverrides, 2), Root2 = _getOverrides2[0], rootProps = _getOverrides2[1];
  return React5.createElement(Root2, _extends3({
    "data-baseweb": "accordion"
  }, rootProps), React5.Children.map(children, function(child, index) {
    var key = child.key || String(index);
    return React5.cloneElement(child, {
      disabled: child.props.disabled || disabled,
      expanded: expanded.includes(key),
      key,
      onChange: (
        // Don't bother constructing the wrapper function if no one is listening
        onChange3 && typeof onChange3 === "function" ? function() {
          var next;
          if (accordion) {
            if (expanded.includes(key)) {
              next = [];
            } else {
              next = [key];
            }
          } else {
            if (expanded.includes(key)) {
              next = expanded.filter(function(k) {
                return k !== key;
              });
            } else {
              next = [].concat(_toConsumableArray2(expanded), [key]);
            }
          }
          onChange3({
            key,
            expanded: next
          });
        } : onChange3
      ),
      overrides: child.props.overrides || PanelOverrides,
      renderAll,
      renderPanelContent
    });
  }));
}
var stateless_accordion_default = StatelessAccordion;
export {
  Accordion,
  panel_default as Panel,
  STATE_CHANGE_TYPE,
  StatefulPanel,
  stateful_panel_container_default as StatefulPanelContainer,
  stateless_accordion_default as StatelessAccordion,
  Content as StyledContent,
  ContentAnimationContainer as StyledContentAnimationContainer,
  Header as StyledHeader,
  PanelContainer as StyledPanelContainer,
  Root as StyledRoot,
  ToggleIcon as StyledToggleIcon,
  ToggleIconGroup as StyledToggleIconGroup
};
//# sourceMappingURL=baseui_accordion.js.map
